
class Graph{
  

 private int number;
 private boolean yonluMu;
 private  boolean AgırlıklıMı;
 private float matrix[][];
 private boolean isSetMatrix[][];
        Graph(int number  ,boolean agır,boolean yonlu){
     this.AgırlıklıMı=agır;
     this.yonluMu=yonlu;
     this.number=number;
     matrix=new float[number][number];
     isSetMatrix=new boolean[number][number];

 }
        public  void addEdge(int dugum,int hedef){

            int degerEkle=1;
            if(AgırlıklıMı){
                degerEkle=0;

            }
            matrix[dugum][hedef]=degerEkle;
            isSetMatrix[dugum][hedef]=true;
            if(!yonluMu){
               matrix[dugum][hedef]=degerEkle;
               isSetMatrix[dugum][hedef]=true;
            }
        }
        public void addEdge(int dugum , int hedef,float agırlık){
        float  degerEkle=agırlık;
        if(!AgırlıklıMı){
            agırlık=1;

        }
            matrix[dugum][hedef]=degerEkle;
            isSetMatrix[dugum][hedef]=true;
            if(!yonluMu){
                matrix[dugum][hedef]=degerEkle;
                isSetMatrix[dugum][hedef]=true;
        }

}
//komşuluk matrisini kolay yazmak için
    public void printMatrix(){
        for (int i = 0; i < number; i++) {
            for (int j = 0; j < number; j++) {
                if (isSetMatrix[i][j])
                    System.out.format("%8s", String.valueOf(matrix[i][j]));
                else System.out.format("%8s", "/  ");
            }
            System.out.println();
        }
    }
    public void printEdges() {
        for (int i = 0; i < number; i++) {
            System.out.print("Node " + i + " is connected to: ");
            for (int j = 0; j < number; j++) {
                if (isSetMatrix[i][j]) {
                    System.out.print(j + " ");
                }
            }
            System.out.println();
        }
    }
    public boolean hasEdge(int dugum, int hedef) {
        return isSetMatrix[dugum][hedef];
    }
    public Float getEdgeValue(int dugum, int hedef) {
        if (!AgırlıklıMı || !isSetMatrix[dugum][hedef])
            return null;
        return matrix[dugum][hedef];
    }
}



public class Main {


    public static void main(String[] args) {

        // Graph(numOfNodes, directed, weighted)
        Graph graph = new Graph(5, false, true);

        graph.addEdge(0, 2, 19);
        graph.addEdge(0, 3, -2);
        graph.addEdge(1, 2, 3);
        graph.addEdge(1, 3);
        graph.addEdge(1, 4);
        graph.addEdge(2, 3);
        graph.addEdge(3, 4);

        graph.printMatrix();

        System.out.println();
        System.out.println();

        graph.printEdges();

        System.out.println();
        System.out.println("Does an edge from 1 to 0 exist?");
        if (graph.hasEdge(0,1)) {
            System.out.println("Yes");
        }
        else System.out.println("No");
    }
    }
